# Generated by Django 5.1.1 on 2024-10-05 12:28

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Background',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name_plural': 'backgrounds',
            },
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name_plural': 'conditions',
            },
        ),
        migrations.CreateModel(
            name='CreatureType',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DamageType',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name_plural': 'damage types',
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the Document.', max_length=100, primary_key=True, serialize=False)),
                ('author', models.TextField(help_text='Author or authors.')),
                ('published_at', models.DateTimeField(help_text='Date of publication, or null if unknown.')),
                ('permalink', models.URLField(help_text='Link to the document.')),
                ('stats_expected', models.JSONField(blank=True, help_text='JSON representation of expected object counts.', null=True)),
                ('distance_unit', models.CharField(blank=True, choices=[('feet', 'feet'), ('miles', 'miles')], help_text='What distance unit the relevant field uses.', max_length=20, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the License.', max_length=100, primary_key=True, serialize=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('key', models.CharField(help_text='Unique key for the publishing organization.', max_length=100, primary_key=True, serialize=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Ruleset',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the ruleset the document was published for.', max_length=100, primary_key=True, serialize=False)),
                ('content_prefix', models.CharField(blank=True, help_text='Short code prepended to content keys.', max_length=10)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SearchResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_pk', models.CharField(max_length=255)),
                ('object_pk', models.CharField(max_length=255)),
                ('object_name', models.CharField(max_length=100)),
                ('object_model', models.CharField(max_length=255)),
                ('schema_version', models.CharField(max_length=100)),
                ('rank', models.DecimalField(decimal_places=4, default=None, max_digits=10, null=True)),
                ('text', models.TextField(default=None, null=True)),
                ('highlighted', models.TextField(default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BackgroundBenefit',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('type', models.CharField(blank=True, choices=[('ability_score', 'Ability Score Increase or Decrease'), ('skill_proficiency', 'Skill Proficiency'), ('tool_proficiency', 'Tool Proficiency'), ('language', 'Language'), ('equipment', 'Equipment'), ('feature', 'Feature'), ('suggested_characteristics', 'Suggested Characteristics'), ('adventures_and_advancement', 'Adventures and Advancement'), ('connection_and_memento', 'Connection and Memento')], help_text='Modification type.', max_length=200, null=True)),
                ('key', models.CharField(help_text='Unique key for the Document.', max_length=100, primary_key=True, serialize=False)),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.background')),
            ],
            options={
                'ordering': ['pk'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CharacterClass',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('hit_dice', models.CharField(blank=True, choices=[('D4', 'd4'), ('D6', 'd6'), ('D8', 'd8'), ('D10', 'd10'), ('D12', 'd12'), ('D20', 'd20')], default=None, help_text='Dice notation hit dice option.', max_length=100, null=True)),
                ('subclass_of', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='api_v2.characterclass')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClassFeature',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.characterclass')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClassFeatureItem',
            fields=[
                ('key', models.CharField(help_text='Unique key for the Document.', max_length=100, primary_key=True, serialize=False)),
                ('level', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)])),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.classfeature')),
            ],
        ),
        migrations.CreateModel(
            name='Creature',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('ability_score_strength', models.SmallIntegerField(default=0, help_text='Integer representing the strength ability.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('ability_score_dexterity', models.SmallIntegerField(default=0, help_text='Integer representing the dexterity ability.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('ability_score_constitution', models.SmallIntegerField(default=0, help_text='Integer representing the constitution ability.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('ability_score_intelligence', models.SmallIntegerField(default=0, help_text='Integer representing the intelligence ability.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('ability_score_wisdom', models.SmallIntegerField(default=0, help_text='Integer representing the wisdom ability.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('ability_score_charisma', models.SmallIntegerField(default=0, help_text='Integer representing the charisma ability.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('saving_throw_strength', models.SmallIntegerField(blank=True, help_text='Signed integer added to strength saving throws.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('saving_throw_dexterity', models.SmallIntegerField(blank=True, help_text='Signed integer added to dexterity saving throws.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('saving_throw_constitution', models.SmallIntegerField(blank=True, help_text='Signed integer added to constitution saving throws.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('saving_throw_intelligence', models.SmallIntegerField(blank=True, help_text='Signed integer added to intelligence saving throws.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('saving_throw_wisdom', models.SmallIntegerField(blank=True, help_text='Signed integer added to wisdom saving throws.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('saving_throw_charisma', models.SmallIntegerField(blank=True, help_text='Signed integer added to charisma saving throws.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_acrobatics', models.SmallIntegerField(blank=True, help_text='Signed integer added to acrobatics skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_animal_handling', models.SmallIntegerField(blank=True, help_text='Signed integer added to animal handling skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_arcana', models.SmallIntegerField(blank=True, help_text='Signed integer added to arcana skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_athletics', models.SmallIntegerField(blank=True, help_text='Signed integer added to athletics skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_deception', models.SmallIntegerField(blank=True, help_text='Signed integer added to deception skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_history', models.SmallIntegerField(blank=True, help_text='Signed integer added to history skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_insight', models.SmallIntegerField(blank=True, help_text='Signed integer added to insight skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_intimidation', models.SmallIntegerField(blank=True, help_text='Signed integer added to intimidation skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_investigation', models.SmallIntegerField(blank=True, help_text='Signed integer added to investigation skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_medicine', models.SmallIntegerField(blank=True, help_text='Signed integer added to medicine skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_nature', models.SmallIntegerField(blank=True, help_text='Signed integer added to nature skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_perception', models.SmallIntegerField(blank=True, help_text='Signed integer added to perception skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_performance', models.SmallIntegerField(blank=True, help_text='Signed integer added to performance skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_persuasion', models.SmallIntegerField(blank=True, help_text='Signed integer added to persuasion skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_religion', models.SmallIntegerField(blank=True, help_text='Signed integer added to religion skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_sleight_of_hand', models.SmallIntegerField(blank=True, help_text='Signed integer added to sleight of hand skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_stealth', models.SmallIntegerField(blank=True, help_text='Signed integer added to stealth skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('skill_bonus_survival', models.SmallIntegerField(blank=True, help_text='Signed integer added to survival skill checks.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('passive_perception', models.SmallIntegerField(default=0, help_text='Integer representing the passive perception ability.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(40)])),
                ('normal_sight_range', models.FloatField(blank=True, help_text='Used to measure distance.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('darkvision_range', models.FloatField(blank=True, help_text='Used to measure distance.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('blindsight_range', models.FloatField(blank=True, help_text='Used to measure distance.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('tremorsense_range', models.FloatField(blank=True, help_text='Used to measure distance.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('truesight_range', models.FloatField(blank=True, help_text='Used to measure distance.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('weight', models.DecimalField(decimal_places=3, default=0, help_text='Number representing the weight of the object.', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('armor_class', models.IntegerField(default=0, help_text='Integer representing the armor class of the object.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('hit_points', models.IntegerField(default=0, help_text='Integer representing the hit points of the object.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('hit_dice', models.TextField(blank=True, help_text='Dice string representing a way to calculate hit points.', null=True)),
                ('nonmagical_attack_resistance', models.BooleanField(default=False, help_text='If api_v2.models.object is resistant to nonmagical attacks.')),
                ('nonmagical_attack_immunity', models.BooleanField(default=False, help_text='If the api_v2.models.object is immune to nonmagical attacks.')),
                ('languages_desc', models.TextField(blank=True, default='[None provided]', help_text='Description of the languages item.')),
                ('telepathy_range', models.FloatField(blank=True, help_text='Used to measure distance.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('walk', models.FloatField(blank=True, help_text='Used to measure distance.', validators=[django.core.validators.MinValueValidator(0)])),
                ('unit', models.CharField(blank=True, choices=[('feet', 'feet'), ('miles', 'miles')], help_text='What distance unit the relevant field uses.', max_length=20, null=True)),
                ('hover', models.BooleanField(default=False, help_text='Whether or not the walk movement is hovering.')),
                ('fly', models.FloatField(blank=True, help_text='Used to measure distance.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('burrow', models.FloatField(blank=True, help_text='Used to measure distance.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('climb', models.FloatField(blank=True, help_text='Used to measure distance.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('swim', models.FloatField(blank=True, help_text='Used to measure distance.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('category', models.CharField(help_text='What category this creature belongs to.', max_length=100)),
                ('subcategory', models.CharField(help_text='What subcategory this creature belongs to.', max_length=100, null=True)),
                ('alignment', models.CharField(help_text="The creature's allowed alignments.", max_length=100)),
                ('challenge_rating_decimal', models.DecimalField(decimal_places=3, help_text='Challenge Rating field as a decimal number.', max_digits=10, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('experience_points_integer', models.IntegerField(blank=True, help_text='Optional override for calculated XP based on CR.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('condition_immunities', models.ManyToManyField(help_text='Conditions that this creature is immune to.', to='api_v2.condition')),
                ('type', models.ForeignKey(help_text='Type of creature, such as Aberration.', on_delete=django.db.models.deletion.CASCADE, to='api_v2.creaturetype')),
                ('damage_immunities', models.ManyToManyField(related_name='creature_damage_immunities', to='api_v2.damagetype')),
                ('damage_resistances', models.ManyToManyField(related_name='creature_damage_resistances', to='api_v2.damagetype')),
                ('damage_vulnerabilities', models.ManyToManyField(related_name='creature_damage_vulnerabilities', to='api_v2.damagetype')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
            ],
            options={
                'ordering': ['pk'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CreatureAction',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the Document.', max_length=100, primary_key=True, serialize=False)),
                ('uses_type', models.CharField(blank=True, choices=[('PER_DAY', 'X/Day'), ('RECHARGE_ON_ROLL', 'Recharge X-6'), ('RECHARGE_AFTER_REST', 'Recharge after a Short or Long rest')], help_text='How use of the action is limited, if at all.', max_length=20, null=True)),
                ('uses_param', models.SmallIntegerField(blank=True, help_text='The parameter X for if the action is limited.', null=True)),
                ('action_type', models.CharField(blank=True, choices=[('ACTION', 'Action'), ('REACTION', 'Reaction'), ('BONUS_ACTION', 'Bonus Action'), ('LEGENDARY_ACTION', 'Legendary Action'), ('LAIR_ACTION', 'Lair Action')], default='ACTION', help_text='The type of action used.', max_length=20, null=True)),
                ('form_condition', models.CharField(blank=True, default=None, help_text='Description of form-based conditions for this action.', max_length=100, null=True)),
                ('legendary_cost', models.SmallIntegerField(blank=True, default=None, help_text='0 if not legendary, else, the number of legendary actions this costs.', null=True)),
                ('parent', models.ForeignKey(help_text='The creature to which this action belongs.', on_delete=django.db.models.deletion.CASCADE, to='api_v2.creature')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CreatureTrait',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('type', models.CharField(blank=True, choices=[('ability_score', 'Ability Score Increase or Decrease'), ('skill_proficiency', 'Skill Proficiency'), ('tool_proficiency', 'Tool Proficiency'), ('language', 'Language'), ('equipment', 'Equipment'), ('feature', 'Feature'), ('suggested_characteristics', 'Suggested Characteristics'), ('adventures_and_advancement', 'Adventures and Advancement'), ('connection_and_memento', 'Connection and Memento')], help_text='Modification type.', max_length=200, null=True)),
                ('key', models.CharField(help_text='Unique key for the Document.', max_length=100, primary_key=True, serialize=False)),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.creature')),
            ],
            options={
                'ordering': ['pk'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CreatureActionAttack',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('key', models.CharField(help_text='Unique key for the Document.', max_length=100, primary_key=True, serialize=False)),
                ('attack_type', models.CharField(choices=[('SPELL', 'Spell'), ('WEAPON', 'Weapon')], help_text='Whether this is a Weapon or Spell attack.', max_length=20)),
                ('to_hit_mod', models.SmallIntegerField(help_text='Attack roll modifier.', validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('reach_ft', models.SmallIntegerField(blank=True, help_text='Reach for melee attacks, in feet.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('range_ft', models.SmallIntegerField(blank=True, help_text='Normal range for ranged attacks, in feet.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('long_range_ft', models.SmallIntegerField(blank=True, help_text='Long range for ranged attacks, in feet.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('target_creature_only', models.BooleanField(help_text='If an attack can target creatures only and not objects.')),
                ('damage_die_count', models.SmallIntegerField(blank=True, help_text='The number of dice to roll for damage.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('damage_die_type', models.CharField(blank=True, choices=[('D4', 'd4'), ('D6', 'd6'), ('D8', 'd8'), ('D10', 'd10'), ('D12', 'd12'), ('D20', 'd20')], help_text='What kind of die to roll for damage.', max_length=20, null=True)),
                ('damage_bonus', models.SmallIntegerField(blank=True, help_text='Damage roll modifier.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('extra_damage_die_count', models.SmallIntegerField(blank=True, help_text='The number of dice to roll for damage.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('extra_damage_die_type', models.CharField(blank=True, choices=[('D4', 'd4'), ('D6', 'd6'), ('D8', 'd8'), ('D10', 'd10'), ('D12', 'd12'), ('D20', 'd20')], help_text='What kind of die to roll for damage.', max_length=20, null=True)),
                ('extra_damage_bonus', models.SmallIntegerField(blank=True, help_text='Damage roll modifier.', null=True, validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(20)])),
                ('parent', models.ForeignKey(help_text='The creature action to which this attack belongs.', on_delete=django.db.models.deletion.CASCADE, to='api_v2.creatureaction')),
                ('damage_type', models.ForeignKey(blank=True, help_text='What kind of damage this attack deals', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='api_v2.damagetype')),
                ('extra_damage_type', models.ForeignKey(blank=True, help_text='What kind of extra damage this attack deals', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='api_v2.damagetype')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='damagetype',
            name='document',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document'),
        ),
        migrations.AddField(
            model_name='creaturetype',
            name='document',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document'),
        ),
        migrations.CreateModel(
            name='CreatureSet',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('creatures', models.ManyToManyField(help_text='The set of creatures.', related_name='creaturesets', to='api_v2.creature')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='condition',
            name='document',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document'),
        ),
        migrations.AddField(
            model_name='background',
            name='document',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document'),
        ),
        migrations.CreateModel(
            name='Armor',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('grants_stealth_disadvantage', models.BooleanField(default=False, help_text='If the armor results in disadvantage on stealth checks.')),
                ('strength_score_required', models.IntegerField(blank=True, help_text='Strength score required to wear the armor without penalty.', null=True)),
                ('ac_base', models.IntegerField(help_text='Integer representing the armor class without modifiers.')),
                ('ac_add_dexmod', models.BooleanField(default=False, help_text='If the final armor class includes dexterity modifier.')),
                ('ac_cap_dexmod', models.IntegerField(blank=True, help_text='Integer representing the dexterity modifier cap.', null=True)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
            ],
            options={
                'verbose_name_plural': 'armor',
            },
        ),
        migrations.CreateModel(
            name='Alignment',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Ability',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('short_desc', models.CharField(help_text='Short description of the ability.', max_length=100)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
            ],
            options={
                'verbose_name_plural': 'abilities',
            },
        ),
        migrations.CreateModel(
            name='Environment',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('aquatic', models.BooleanField(default=False, help_text='Whether or not aquatic environment rules apply to this environment.')),
                ('planar', models.BooleanField(default=False, help_text='Whether or not this environment is a plane of existence.')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
            ],
            options={
                'verbose_name_plural': 'environments',
            },
        ),
        migrations.CreateModel(
            name='Feat',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('prerequisite', models.CharField(blank=True, help_text='Prerequisite for the game content item.', max_length=200)),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
            ],
            options={
                'verbose_name_plural': 'feats',
            },
        ),
        migrations.CreateModel(
            name='FeatBenefit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('type', models.CharField(blank=True, choices=[('ability_score', 'Ability Score Increase or Decrease'), ('skill_proficiency', 'Skill Proficiency'), ('tool_proficiency', 'Tool Proficiency'), ('language', 'Language'), ('equipment', 'Equipment'), ('feature', 'Feature'), ('suggested_characteristics', 'Suggested Characteristics'), ('adventures_and_advancement', 'Adventures and Advancement'), ('connection_and_memento', 'Connection and Memento')], help_text='Modification type.', max_length=200, null=True)),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.feat')),
            ],
            options={
                'ordering': ['pk'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ItemCategory',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ItemRarity',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('rank', models.IntegerField(help_text='Ranking of the rarity, most common has the lowest values.', unique=True)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('weight', models.DecimalField(decimal_places=3, default=0, help_text='Number representing the weight of the object.', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('armor_class', models.IntegerField(default=0, help_text='Integer representing the armor class of the object.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('hit_points', models.IntegerField(default=0, help_text='Integer representing the hit points of the object.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('hit_dice', models.TextField(blank=True, help_text='Dice string representing a way to calculate hit points.', null=True)),
                ('nonmagical_attack_resistance', models.BooleanField(default=False, help_text='If api_v2.models.object is resistant to nonmagical attacks.')),
                ('nonmagical_attack_immunity', models.BooleanField(default=False, help_text='If the api_v2.models.object is immune to nonmagical attacks.')),
                ('cost', models.DecimalField(decimal_places=2, default=None, help_text='Number representing the cost of the object.', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('requires_attunement', models.BooleanField(default=False, help_text='If the item requires attunement.')),
                ('armor', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='api_v2.armor')),
                ('damage_immunities', models.ManyToManyField(related_name='item_damage_immunities', to='api_v2.damagetype')),
                ('damage_resistances', models.ManyToManyField(related_name='item_damage_resistances', to='api_v2.damagetype')),
                ('damage_vulnerabilities', models.ManyToManyField(related_name='item_damage_vulnerabilities', to='api_v2.damagetype')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.itemcategory')),
                ('rarity', models.ForeignKey(help_text='Rarity object.', null=True, on_delete=django.db.models.deletion.CASCADE, to='api_v2.itemrarity')),
            ],
            options={
                'ordering': ['pk'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ItemSet',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
                ('items', models.ManyToManyField(help_text='The set of items.', related_name='itemsets', to='api_v2.item')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('is_exotic', models.BooleanField(default=False, help_text='Whether or not the language is exotic.')),
                ('is_secret', models.BooleanField(default=False, help_text='Whether or not the language is secret.')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
                ('script_language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api_v2.language')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='creature',
            name='languages',
            field=models.ManyToManyField(to='api_v2.language'),
        ),
        migrations.AddField(
            model_name='document',
            name='licenses',
            field=models.ManyToManyField(help_text='Licenses that the content has been released under.', to='api_v2.license'),
        ),
        migrations.AddField(
            model_name='document',
            name='publisher',
            field=models.ForeignKey(help_text='Publisher which has written the game content document.', on_delete=django.db.models.deletion.CASCADE, to='api_v2.publisher'),
        ),
        migrations.CreateModel(
            name='Race',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
                ('subrace_of', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='api_v2.race')),
            ],
            options={
                'verbose_name_plural': 'races',
            },
        ),
        migrations.CreateModel(
            name='RaceTrait',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('type', models.CharField(blank=True, choices=[('ability_score', 'Ability Score Increase or Decrease'), ('skill_proficiency', 'Skill Proficiency'), ('tool_proficiency', 'Tool Proficiency'), ('language', 'Language'), ('equipment', 'Equipment'), ('feature', 'Feature'), ('suggested_characteristics', 'Suggested Characteristics'), ('adventures_and_advancement', 'Adventures and Advancement'), ('connection_and_memento', 'Connection and Memento')], help_text='Modification type.', max_length=200, null=True)),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.race')),
            ],
            options={
                'ordering': ['pk'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='document',
            name='ruleset',
            field=models.ForeignKey(help_text="The document's game system that it was published for.", on_delete=django.db.models.deletion.CASCADE, to='api_v2.ruleset'),
        ),
        migrations.CreateModel(
            name='Size',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('rank', models.IntegerField(help_text='Ranking of the size, smallest has the lowest values.', unique=True)),
                ('space_diameter', models.DecimalField(decimal_places=3, default=0, help_text='Number representing the diameter of the space controlled by the object.', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='item',
            name='size',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.size'),
        ),
        migrations.AddField(
            model_name='creature',
            name='size',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.size'),
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('ability', models.ForeignKey(help_text='The ability referenced by this skill.', on_delete=django.db.models.deletion.CASCADE, to='api_v2.ability')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
            ],
            options={
                'verbose_name_plural': 'skills',
            },
        ),
        migrations.CreateModel(
            name='Spell',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('level', models.IntegerField(help_text='Integer representing the default slot level required by the spell.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9)])),
                ('higher_level', models.TextField(blank=True, help_text='Description of casting the spell at a different level.')),
                ('target_type', models.TextField(choices=[('creature', 'Creature'), ('object', 'Object'), ('point', 'Point'), ('area', 'Area')], help_text='Spell target type key.')),
                ('range_text', models.TextField(choices=[('Self', 'Self'), ('Touch', 'Touch'), ('Special', 'Special'), ('5 feet', '5 feet'), ('10 feet', '10 feet'), ('15 feet', '15 feet'), ('20 feet', '20 feet'), ('25 feet', '25 feet'), ('30 feet', '30 feet'), ('40 feet', '40 feet'), ('50 feet', '50 feet'), ('60 feet', '60 feet'), ('90 feet', '90 feet'), ('100 feet', '100 feet'), ('120 feet', '120 feet'), ('150 feet', '150 feet'), ('180 feet', '180 feet'), ('200 feet', '200 feet'), ('300 feet', '300 feet'), ('400 feet', '400 feet'), ('500 feet', '500 feet'), ('1000 feet', '1000 feet'), ('Sight', 'Sight'), ('1 mile', '1 mile'), ('5 miles', '5 miles'), ('10 miles', '10 miles'), ('100 miles', '100 miles'), ('150 miles', '150 miles'), ('500 miles', '500 miles'), ('Unlimited', 'Unlimited')], help_text='Spell target range.')),
                ('range', models.FloatField(blank=True, help_text='Used to measure distance.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('range_unit', models.CharField(blank=True, choices=[('feet', 'feet'), ('miles', 'miles')], help_text='What distance unit the relevant field uses.', max_length=20, null=True)),
                ('ritual', models.BooleanField(default=False, help_text='Whether or not the spell can be cast as a ritual.')),
                ('casting_time', models.TextField(choices=[('reaction', 'Reaction'), ('bonus-action', '1 Bonus Action'), ('action', '1 Action'), ('turn', '1 Turn'), ('round', '1 Round'), ('1minute', '1 Minute'), ('5minutes', '5 Minutes'), ('10minutes', '10 Minutes'), ('1hour', '1 Hour'), ('4hours', '4 Hours'), ('7hours', '7 Hours'), ('8hours', '8 Hours'), ('9hours', '9 Hours'), ('12hours', '12 Hours'), ('24hours', '24 Hours'), ('1week', '1 Week')], help_text="Casting time key, such as 'action'")),
                ('reaction_condition', models.TextField(blank=True, help_text='The conditions describing when a reaction spell can be cast', null=True)),
                ('verbal', models.BooleanField(default=False, help_text='Whether or not casting the spell requires a verbal component.')),
                ('somatic', models.BooleanField(default=False, help_text='Whether or not casting the spell requires a verbal component.')),
                ('material', models.BooleanField(default=False, help_text='Whether or not casting the spell requires a verbal component.')),
                ('material_specified', models.TextField(blank=True, help_text='Description of the material specified for the spell.')),
                ('material_cost', models.DecimalField(blank=True, decimal_places=2, default=None, help_text='Number representing the cost of the materials of the spell.', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('material_consumed', models.BooleanField(default=False, help_text='Whether or the material component is consumed during the casting.')),
                ('target_count', models.IntegerField(help_text='Integer representing the count of targets.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('saving_throw_ability', models.TextField(blank=True, help_text='Given the spell requires a saving throw, which ability is targeted. Empty string if no saving throw.')),
                ('attack_roll', models.BooleanField(default=False, help_text='Whether or not the spell effect requires an attack roll.')),
                ('damage_roll', models.TextField(blank=True, help_text='The damage roll for the field in dice notation. Empty string if no roll.')),
                ('damage_types', models.JSONField(blank=True, default=list, help_text='The types of damage done by the spell in a list.')),
                ('duration', models.TextField(choices=[('instantaneous', 'instantaneous'), ('instantaneous or special', 'instantaneous or special'), ('1 turn', '1 turn'), ('1 round', '1 round'), ('concentration + 1 round', 'concentration + 1 round'), ('2 rounds', '2 rounds'), ('3 rounds', '3 rounds'), ('4 rounds', '4 rounds'), ('1d4+2 rounds', '1d4+2 rounds'), ('5 rounds', '5 rounds'), ('6 rounds', '6 rounds'), ('10 rounds', '10 rounds'), ('up to 1 minute', 'up to 1 minute'), ('1 minute', '1 minute'), ('1 minute, or until expended', '1 minute, or until expended'), ('1 minute, until expended', '1 minute, until expended'), ('1 minute', '1 minute'), ('5 minutes', '5 minutes'), ('10 minutes', '10 minutes'), ('1 minute or 1 hour', '1 minute or 1 hour'), ('up to 1 hour', 'up to 1 hour'), ('1 hour', '1 hour'), ('1 hour or until triggered', '1 hour or until triggered'), ('2 hours', '2 hours'), ('3 hours', '3 hours'), ('1d10 hours', '1d10 hours'), ('6 hours', '6 hours'), ('2-12 hours', '2-12 hours'), ('up to 8 hours', 'up to 8 hours'), ('8 hours', '8 hours'), ('1 hour/caster level', '1 hour/caster level'), ('10 hours', '10 hours'), ('12 hours', '12 hours'), ('24 hours or until the target attempts a third death saving throw', '24 hours or until the target attempts a third death saving throw'), ('24 hours', '24 hours'), ('1 day', '1 day'), ('3 days', '3 days'), ('5 days', '5 days'), ('7 days', '7 days'), ('10 days', '10 days'), ('13 days', '13 days'), ('30 days', '30 days'), ('1 year', '1 year'), ('special', 'special'), ('until dispelled or destroyed', 'until dispelled or destroyed'), ('until destroyed', 'until destroyed'), ('until dispelled', 'until dispelled'), ('until cured or dispelled', 'until cured or dispelled'), ('until dispelled or triggered', 'until dispelled or triggered'), ('permanent until discharged', 'permanent until discharged'), ('permanent; one generation', 'permanent; one generation'), ('permanent', 'permanent')], help_text='Description of the duration of the effect such as "instantaneous" or "1 minute"')),
                ('shape_type', models.TextField(blank=True, choices=[('cone', 'Cone'), ('cube', 'Cube'), ('cylinder', 'Cylinder'), ('line', 'Line'), ('sphere', 'sphere')], help_text='The shape of the area of effect.', null=True)),
                ('shape_size', models.FloatField(blank=True, help_text='Used to measure distance.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('shape_size_unit', models.CharField(blank=True, choices=[('feet', 'feet'), ('miles', 'miles')], help_text='What distance unit the relevant field uses.', max_length=20, null=True)),
                ('concentration', models.BooleanField(default=False, help_text='Whether the effect requires concentration to be maintained.')),
                ('classes', models.ManyToManyField(to='api_v2.characterclass')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpellCastingOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.TextField(choices=[('default', 'Default'), ('ritual', 'Ritual'), ('player_level_1', 'Player Level 1'), ('player_level_2', 'Player Level 2'), ('player_level_3', 'Player Level 3'), ('player_level_4', 'Player Level 4'), ('player_level_5', 'Player Level 5'), ('player_level_6', 'Player Level 6'), ('player_level_7', 'Player Level 7'), ('player_level_8', 'Player Level 8'), ('player_level_9', 'Player Level 9'), ('player_level_10', 'Player Level 10'), ('player_level_11', 'Player Level 11'), ('player_level_12', 'Player Level 12'), ('player_level_13', 'Player Level 13'), ('player_level_14', 'Player Level 14'), ('player_level_15', 'Player Level 15'), ('player_level_16', 'Player Level 16'), ('player_level_17', 'Player Level 17'), ('player_level_18', 'Player Level 18'), ('player_level_19', 'Player Level 19'), ('player_level_20', 'Player Level 20'), ('slot_level_1', 'Spell Slot Level 1'), ('slot_level_2', 'Spell SlotLevel 2'), ('slot_level_3', 'Spell Slot Level 3'), ('slot_level_4', 'Spell Slot Level 4'), ('slot_level_5', 'Spell Slot Level 5'), ('slot_level_6', 'Spell Slot Level 6'), ('slot_level_7', 'Spell Slot Level 7'), ('slot_level_8', 'Spell Slot Level 8'), ('slot_level_9', 'Spell Slot Level 9')])),
                ('damage_roll', models.TextField(blank=True, help_text='The damage roll for the field in dice notation. Empty string if no roll.', null=True)),
                ('target_count', models.IntegerField(help_text='Integer representing the count of targets.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('duration', models.TextField(help_text='Description of the duration of the effect such as "instantaneous" or "Up to 1 minute"', null=True)),
                ('range', models.TextField(help_text='Description of the range of the spell.', null=True)),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.spell')),
            ],
        ),
        migrations.CreateModel(
            name='SpellSchool',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='spell',
            name='school',
            field=models.ForeignKey(help_text="Spell school, such as 'evocation'", on_delete=django.db.models.deletion.CASCADE, to='api_v2.spellschool'),
        ),
        migrations.CreateModel(
            name='Weapon',
            fields=[
                ('name', models.CharField(help_text='Name of the item.', max_length=100)),
                ('key', models.CharField(help_text='Unique key for the Item.', max_length=100, primary_key=True, serialize=False)),
                ('damage_dice', models.CharField(help_text='The damage dice when used making an attack.', max_length=100)),
                ('versatile_dice', models.CharField(default=0, help_text='The damage dice when attacking using versatile.\nA value of 0 means that the weapon does not have the versatile property.', max_length=100)),
                ('range_reach', models.IntegerField(default=5, help_text='The range of the weapon when making a melee attack.', validators=[django.core.validators.MinValueValidator(0)])),
                ('range_normal', models.IntegerField(default=0, help_text='The normal range of a ranged weapon attack.\nA value of 0 means that the weapon cannot be used for a ranged attack.', validators=[django.core.validators.MinValueValidator(0)])),
                ('range_long', models.IntegerField(default=0, help_text='The long range of a ranged weapon attack.\nA value of 0 means that the weapon cannot be used for a long ranged attack.', validators=[django.core.validators.MinValueValidator(0)])),
                ('is_finesse', models.BooleanField(default=False, help_text='If the weapon is finesse.')),
                ('is_thrown', models.BooleanField(default=False, help_text='If the weapon is thrown.')),
                ('is_two_handed', models.BooleanField(default=False, help_text='If the weapon is two-handed.')),
                ('requires_ammunition', models.BooleanField(default=False, help_text='If the weapon requires ammunition.')),
                ('requires_loading', models.BooleanField(default=False, help_text='If the weapon requires loading.')),
                ('is_heavy', models.BooleanField(default=False, help_text='If the weapon is heavy.')),
                ('is_light', models.BooleanField(default=False, help_text='If the weapon is light.')),
                ('is_lance', models.BooleanField(default=False, help_text='If the weapon is a lance.')),
                ('is_net', models.BooleanField(default=False, help_text='If the weapon is a net.')),
                ('is_simple', models.BooleanField(default=False, help_text='If the weapon category is simple.')),
                ('is_improvised', models.BooleanField(default=False, help_text='If the weapon is improvised.')),
                ('damage_type', models.ForeignKey(help_text='What kind of damage this weapon deals', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='api_v2.damagetype')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_v2.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='item',
            name='weapon',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='api_v2.weapon'),
        ),
    ]
