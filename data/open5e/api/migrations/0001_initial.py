# Generated by Django 5.1.1 on 2024-10-05 12:27

import api.validators
import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(default=uuid.uuid1, max_length=255, unique=True)),
                ('title', models.TextField(help_text='Title of the document.')),
                ('desc', models.TextField(help_text='Description of the document.')),
                ('license', models.TextField(help_text='The license of the content within the document.')),
                ('author', models.TextField(help_text='Author or authors.')),
                ('organization', models.TextField(help_text='Publishing organization.')),
                ('version', models.TextField(help_text='Document version.')),
                ('url', models.URLField(help_text='URL reference to get the document.')),
                ('copyright', models.TextField(help_text='Copyright statement.', null=True)),
                ('license_url', models.TextField(default='http://open5e.com/legal', help_text='URL reference for the license.')),
            ],
        ),
        migrations.CreateModel(
            name='Manifest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(help_text='Input file name.', max_length=255, unique=True)),
                ('type', models.CharField(help_text='Type of file (maps to a model).', max_length=25)),
                ('hash', models.CharField(help_text='md5 hash of the file contents.', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date that this object was added to the database.')),
            ],
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('slug', models.CharField(default=uuid.uuid1, help_text='Short name for the game content item.', max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.TextField(help_text='Name of the game content item.')),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('page_no', models.IntegerField(null=True)),
                ('route', models.TextField(default='conditions/')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CharClass',
            fields=[
                ('slug', models.CharField(default=uuid.uuid1, help_text='Short name for the game content item.', max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.TextField(help_text='Name of the game content item.')),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('page_no', models.IntegerField(null=True)),
                ('hit_dice', models.TextField(help_text='Description of dice for each level such as "1d12 per barbarian level"')),
                ('hp_at_1st_level', models.TextField(help_text='Description of the Hit Points at level 1, such as "12 + your Constitution modifier"')),
                ('hp_at_higher_levels', models.TextField(help_text='Desciption of increases in Hit Points per level.')),
                ('prof_armor', models.TextField(help_text='Comma-separated list of armor types that the class is proficient with.')),
                ('prof_weapons', models.TextField(help_text='Comma-separated list of weapons that the class is proficient with.')),
                ('prof_tools', models.TextField(help_text='Description of tools the class is proficient with.')),
                ('prof_saving_throws', models.TextField(help_text='Comma separated list of saving throw abilities that the class is proficient with.')),
                ('prof_skills', models.TextField(help_text='Description of the skills that the class is proficient with.')),
                ('equipment', models.TextField(help_text='Markdown description of starting equipment.')),
                ('table', models.TextField(help_text='Table describing class growth by level.')),
                ('spellcasting_ability', models.TextField(help_text='Ability used for casting spells.')),
                ('subtypes_name', models.TextField(help_text='Preferred name for class subtypes, such as "Domains" (for Cleric).')),
                ('route', models.TextField(default='classes/')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Background',
            fields=[
                ('slug', models.CharField(default=uuid.uuid1, help_text='Short name for the game content item.', max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.TextField(help_text='Name of the game content item.')),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('page_no', models.IntegerField(null=True)),
                ('skill_proficiencies', models.TextField(help_text='Description of the skills that the background provides proficiency with.', null=True)),
                ('tool_proficiencies', models.TextField(help_text='Description of the tools that the background provides is proficiency with.', null=True)),
                ('languages', models.TextField(help_text='Description of the languages that the background provides knowledge of.', null=True)),
                ('equipment', models.TextField(help_text='Markdown description of equipment held by characters with this background.')),
                ('feature', models.TextField(help_text='Title of a feature this background grants.')),
                ('feature_desc', models.TextField(help_text='Description of the related background feature.')),
                ('suggested_characteristics', models.TextField(help_text='Currently not implemented.')),
                ('route', models.TextField(default='backgrounds/')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Armor',
            fields=[
                ('slug', models.CharField(default=uuid.uuid1, help_text='Short name for the game content item.', max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.TextField(help_text='Name of the game content item.')),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('page_no', models.IntegerField(null=True)),
                ('category', models.TextField(help_text='Category of the armor, such as "Heavy Armor"')),
                ('cost', models.TextField(help_text='Suggested cost of the weapon, such as "100 gp"')),
                ('weight', models.TextField(help_text='Apparently an empty string.')),
                ('stealth_disadvantage', models.BooleanField(verbose_name='Boolean representing whether wearing the armor results in stealth disadvantage for the wearer.')),
                ('base_ac', models.IntegerField()),
                ('plus_dex_mod', models.BooleanField(default=False)),
                ('plus_con_mod', models.BooleanField(default=False)),
                ('plus_wis_mod', models.BooleanField(default=False)),
                ('plus_flat_mod', models.IntegerField(default=False)),
                ('plus_max', models.IntegerField(default=0)),
                ('strength_requirement', models.IntegerField(null=True)),
                ('route', models.TextField(default='armor/')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Archetype',
            fields=[
                ('slug', models.CharField(default=uuid.uuid1, help_text='Short name for the game content item.', max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.TextField(help_text='Name of the game content item.')),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('page_no', models.IntegerField(null=True)),
                ('route', models.TextField(default='archetypes/')),
                ('char_class', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='archetypes', to='api.charclass')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Feat',
            fields=[
                ('slug', models.CharField(default=uuid.uuid1, help_text='Short name for the game content item.', max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.TextField(help_text='Name of the game content item.')),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('page_no', models.IntegerField(null=True)),
                ('prerequisite', models.TextField(help_text='Description of a prerequisite for the character.', null=True)),
                ('route', models.TextField(default='feats/')),
                ('effects_desc_json', models.TextField()),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MagicItem',
            fields=[
                ('slug', models.CharField(default=uuid.uuid1, help_text='Short name for the game content item.', max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.TextField(help_text='Name of the game content item.')),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('page_no', models.IntegerField(null=True)),
                ('type', models.TextField(help_text='Description of the item type, such as "Armor (light)".')),
                ('rarity', models.TextField(help_text='Description of the rarity, such as "rare".')),
                ('requires_attunement', models.TextField(verbose_name='The word "requires attunement" or blank.')),
                ('route', models.TextField(default='magicitems/')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Monster',
            fields=[
                ('slug', models.CharField(default=uuid.uuid1, help_text='Short name for the game content item.', max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.TextField(help_text='Name of the game content item.')),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('page_no', models.IntegerField(null=True)),
                ('size', models.TextField(help_text='Monster size category.')),
                ('type', models.TextField(help_text='The type of the monster, such as "aberration"')),
                ('subtype', models.TextField(help_text='If applicable, the subtype of the monster, such as "shapechanger"')),
                ('group', models.TextField(help_text='Used to group similar creatures at different stages. "Green Dragon"', null=True)),
                ('alignment', models.TextField(help_text='Short description of the creature alignment, such as "lawful good"')),
                ('armor_class', models.IntegerField(default=12, help_text='Integer representing the armor class.')),
                ('armor_desc', models.TextField(help_text='Description of the armor or armor type.', null=True)),
                ('hit_points', models.IntegerField(help_text='Integer of the hit points.', null=True)),
                ('hit_dice', models.TextField(help_text='Dice string representing a way to calculate hit points.')),
                ('speed_json', models.TextField()),
                ('environments_json', models.TextField(help_text='String list of environments that the monster can be found in.', null=True)),
                ('strength', models.IntegerField(help_text='Integer representing the strength score.', null=True)),
                ('dexterity', models.IntegerField(help_text='Integer represeting the dexterity score.', null=True)),
                ('constitution', models.IntegerField(help_text='Integer representing the constitution score.', null=True)),
                ('intelligence', models.IntegerField(help_text='Integer representing the intelligence score.', null=True)),
                ('wisdom', models.IntegerField(help_text='Integer representing the wisdom score.', null=True)),
                ('charisma', models.IntegerField(help_text='Integer representing the charisma score.', null=True)),
                ('strength_save', models.IntegerField(help_text='Integer representing the strength save.', null=True)),
                ('dexterity_save', models.IntegerField(help_text='Integer representing the dexterity save.', null=True)),
                ('constitution_save', models.IntegerField(help_text='Integer representing the constitution save.', null=True)),
                ('intelligence_save', models.IntegerField(help_text='Integer representing the intelligence save', null=True)),
                ('wisdom_save', models.IntegerField(help_text='Integer representing the wisdom save.', null=True)),
                ('charisma_save', models.IntegerField(help_text='Integer representing the charisma save.', null=True)),
                ('perception', models.IntegerField(help_text='Integer representing the passive perception score.', null=True)),
                ('skills_json', models.TextField()),
                ('damage_vulnerabilities', models.TextField(help_text='Comma separated list of damage types the monster is vulnerable to.')),
                ('damage_resistances', models.TextField(help_text='Comma separated list of damage types the monster is resistant to.')),
                ('damage_immunities', models.TextField(help_text='Comma separated list of damage types the monster is immune to.')),
                ('condition_immunities', models.TextField(help_text='Comma separated list of conditions the monster is immune to.')),
                ('senses', models.TextField(verbose_name='Comma separated list of senses, such as "blindsight 60ft."')),
                ('languages', models.TextField(verbose_name='Comma separated list of languages that the monster speaks.')),
                ('challenge_rating', models.TextField(help_text='Monster challenge rating.')),
                ('cr', models.FloatField(help_text='Monster challenge rating as a float.', null=True)),
                ('actions_json', models.TextField()),
                ('bonus_actions_json', models.TextField(default=None, null=True)),
                ('special_abilities_json', models.TextField()),
                ('reactions_json', models.TextField(null=True)),
                ('legendary_desc', models.TextField(null=True)),
                ('legendary_actions_json', models.TextField(null=True)),
                ('spells_json', models.TextField()),
                ('route', models.TextField(default='monsters/')),
                ('img_main', models.URLField(null=True)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Plane',
            fields=[
                ('slug', models.CharField(default=uuid.uuid1, help_text='Short name for the game content item.', max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.TextField(help_text='Name of the game content item.')),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('page_no', models.IntegerField(null=True)),
                ('parent', models.TextField(null=True)),
                ('route', models.TextField(default='planes/')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Race',
            fields=[
                ('slug', models.CharField(default=uuid.uuid1, help_text='Short name for the game content item.', max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.TextField(help_text='Name of the game content item.')),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('page_no', models.IntegerField(null=True)),
                ('asi_desc', models.TextField(help_text='Markdown description of ability score changes for this race.')),
                ('asi_json', models.TextField()),
                ('age', models.TextField(help_text='Markdown description of how this race ages.')),
                ('alignment', models.TextField(help_text='Markdown description of the alignment tendencies of the race.')),
                ('size', models.TextField(help_text='Markdown description of the size category of the race.')),
                ('size_raw', models.TextField(default='Medium', help_text='Size Category.')),
                ('speed_json', models.TextField()),
                ('speed_desc', models.TextField(help_text='Markdown description of the speed of the race.')),
                ('languages', models.TextField(help_text='Markdown description of the languages known by the race.')),
                ('vision', models.TextField(help_text='Markdown description of any vision features the race has.')),
                ('traits', models.TextField(help_text='Markdown description of special traits thr race has.')),
                ('route', models.TextField(default='races/')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('slug', models.CharField(default=uuid.uuid1, help_text='Short name for the game content item.', max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.TextField(help_text='Name of the game content item.')),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('page_no', models.IntegerField(null=True)),
                ('parent', models.TextField(null=True)),
                ('route', models.TextField(default='sections/')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Spell',
            fields=[
                ('slug', models.CharField(default=uuid.uuid1, help_text='Short name for the game content item.', max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.TextField(help_text='Name of the game content item.')),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('page_no', models.IntegerField(null=True)),
                ('page', models.TextField(help_text='Page number reference for the document.')),
                ('spell_level', models.IntegerField(help_text='Integer representing the level of the spell. Cantrip is 0.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9)])),
                ('dnd_class', models.TextField(help_text='List of classes (comma separated) that can learn this spell.')),
                ('school', models.TextField(help_text='Representation of the school of magic, such as "illusion" or "evocation".', validators=[api.validators.spell_school_validator])),
                ('casting_time', models.TextField(help_text='Amount of time it takes to cast the spell, such as "1 bonus action" or "4 hours".')),
                ('range', models.TextField(help_text='Text description of the target range.')),
                ('target_range_sort', models.IntegerField(help_text='Sortable distance ranking to the target. 0 for self, 1 for touch, sight is 9999, unlimited (same plane) is 99990, unlimited any plane is 99999. All other values in feet.', validators=[django.core.validators.MinValueValidator(0)])),
                ('requires_verbal_components', models.BooleanField(default=False, help_text='Casting this spell requires verbal components.')),
                ('requires_somatic_components', models.BooleanField(default=False, help_text='Casting this spell requires somatic components.')),
                ('requires_material_components', models.BooleanField(default=False, help_text='Casting this spell requires material components.')),
                ('material', models.TextField(help_text='Description of the material required.')),
                ('higher_level', models.TextField(help_text='What happens if you cast this at a higher level.')),
                ('can_be_cast_as_ritual', models.BooleanField(default=False, help_text='Whether or not the spell can be cast as a ritual.')),
                ('duration', models.TextField(help_text='Description of the duration such as "instantaneous" or "Up to 1 minute"')),
                ('requires_concentration', models.BooleanField(default=False, help_text='Whether the spell requires concentration')),
                ('archetype', models.TextField(help_text='Archetype that can learn this spell. If empty, assume all archetypes.')),
                ('circles', models.TextField(help_text='Druid Archetypes that can learn this spell.')),
                ('route', models.TextField(default='spells/')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MonsterSpell',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.monster')),
                ('spell', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.spell')),
            ],
        ),
        migrations.AddField(
            model_name='monster',
            name='spell_list',
            field=models.ManyToManyField(through='api.MonsterSpell', to='api.spell'),
        ),
        migrations.CreateModel(
            name='SpellList',
            fields=[
                ('slug', models.CharField(default=uuid.uuid1, help_text='Short name for the game content item.', max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.TextField(help_text='Name of the game content item.')),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('page_no', models.IntegerField(null=True)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.document')),
                ('spells', models.ManyToManyField(help_text='The set of spells.', related_name='spell_lists', to='api.spell')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Subrace',
            fields=[
                ('slug', models.CharField(default=uuid.uuid1, help_text='Short name for the game content item.', max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.TextField(help_text='Name of the game content item.')),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('page_no', models.IntegerField(null=True)),
                ('asi_desc', models.TextField(help_text='Markdown description of ability score changes for this subrace.')),
                ('asi_json', models.TextField()),
                ('traits', models.TextField(help_text='Markdown description of special traits thr race has.')),
                ('route', models.TextField(default='subraces/')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.document')),
                ('parent_race', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subraces', to='api.race')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Weapon',
            fields=[
                ('slug', models.CharField(default=uuid.uuid1, help_text='Short name for the game content item.', max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.TextField(help_text='Name of the game content item.')),
                ('desc', models.TextField(help_text='Description of the game content item. Markdown.')),
                ('page_no', models.IntegerField(null=True)),
                ('category', models.TextField(help_text='Category of the weapon, such as "Martial Melee Weapons"')),
                ('cost', models.TextField(help_text='Suggested cost of the weapon, such as "100 gp"')),
                ('damage_dice', models.TextField(help_text='Dice string of the weapon damage, such as "1d8".')),
                ('damage_type', models.TextField(help_text='Damage type of the weapon, such as "bludgeoning".')),
                ('weight', models.TextField(help_text='Weight of the item, such as "1 lb.".')),
                ('properties_json', models.TextField(help_text='List of properties that the weapon has.')),
                ('route', models.TextField(default='weapons/')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.document')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
