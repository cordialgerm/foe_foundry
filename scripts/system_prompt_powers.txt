I am creating a semantic search system with the goal of matching monster descriptions to related monster powers. These monsters are D&D 5e monsters. For example, if the user searches for "psychic memory-altering monster" I would want the "Modify Memory" power to have a high cosine similarity.

To do this, I need to translate the monster powers that are defined as procedural code into a natural language representation of the monster power that is suitable for embedding and semantic search. I will give you a python file that contains class definitions. At the end of the file there will be a list of all the powers. Generate a natural language description of the power.

For example, for the `ModifyMemory` power below, a good description would be as follows:

"Modify Memory allows the wielder to reshape the memories of a creature it has attacked. Immediately after hitting a creature with an attack, the wielder forces the target to make an Intelligence save or suffer the effects of the Modify Memory spell. This is a psionic power that is suitable to aberrations and monstrosities or to humanoid and fey psionic spellcasters."

Also generate a list of factors that contribute to a creature being selected. You can parse these out of the scoring arguments that are passed in to the score functions.

For the example below, these are good tags

Tags: psychic, controller, ambusher, skirmisher, aberration, spellcaster


class AberrantPower(PowerWithStandardScoring):
    def __init__(
        self,
        name: str,
        source: str,
        create_date: datetime | None = None,
        power_level: float = MEDIUM_POWER,
        **score_args,
    ):
        def is_aberrant_creature(c: BaseStatblock) -> bool:
            if (
                c.creature_type in {CreatureType.Humanoid, CreatureType.Fey}
                and c.attack_type.is_spell()
                and c.secondary_damage_type == DamageType.Psychic
            ):
                return True
            else:
                return c.creature_type in {CreatureType.Aberration, CreatureType.Monstrosity}

        standard_score_args = (
            dict(
                require_callback=is_aberrant_creature,
                bonus_roles=[
                    MonsterRole.Controller,
                    MonsterRole.Ambusher,
                    MonsterRole.Skirmisher,
                ],
                bonus_attack_types=AttackType.AllSpell(),
                bonus_damage=DamageType.Psychic,
            )
            | score_args
        )
        super().__init__(
            name=name,
            power_type=PowerType.Role,
            power_level=power_level,
            source=source,
            create_date=create_date,
            theme="Aberrant",
            score_args=standard_score_args,
        )


class _ModifyMemory(AberrantPower):
    def __init__(self):
        super().__init__(name="Modify Memory", source="SRD5.1 Modify Memory")

    def generate_features(self, stats: BaseStatblock) -> List[Feature]:
        dc = stats.difficulty_class_easy
        feature = Feature(
            name="Modify Memory",
            action=ActionType.BonusAction,
            description=f"Immediately after hitting with an attack, {stats.selfref} attempts to reshape that creature's memories. \
                The creature must succeed on a DC {dc} Intelligence saving throw or be affected as if by the *Modify Memory* spell. \
                A creature that succeeds on the save is immune to this effect for 24 hours.",
        )
        return [feature]


I will provide a new python file and you will provide a natural language description of each power. A good description focuses on what the power does as well as the kinds of creatures that would use the power. Focus on descriptive adjectives that will guide the embedding models to find similarity between the monsters and the powers.

The response should be formatted as JSON. Use this template. Do not enclose the result in ```json tags. Just return the json directly. Do not include any information before or after the result.

[
    // First Power
    {
        "power": "Modify Memory",
        "description": "{NATURAL LANGUAGE DESCRIPTION}",  // see above for example
        "power_text": "{POWER TEXT}", // the text of the power as it would appear in the statblock
        "keywords": ["keyword1", "keyword2", ...]  // keywords that are useful for search and embedding
        "factors": ["factor1", "factor2", ...]  // see above
        "example_creatures": ["creature1", "creature2"] // example D&D creatures demonstrating this power
    },
    //Second Power
    ...
]